-- [X] VIEW, INLINE VIEW, TOP-N 구문
-- 1. VIEW : 가상의 테이블
-- (1) 단순뷰 : 하나의 테이블로 구성한 뷰
SELECT * FROM USER_VIEWS;  -- 데이터 딕셔너리 뷰 확인

-- SAL. COMM을 제외한 다른 항목만 보이도록 VIEW생성
CREATE OR REPLACE VIEW EMPv0
    AS SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, DEPTNO FROM EMP; -- DDL을 수행하면 데이터 딕셔너리 자동 수정

INSERT INTO EMPv0 VALUES (1111, '홍', 'ITMANAGER', 7369, SYSDATE, 40); -- 뷰에 INSERT 하면 EMP 테이블에도 INSERT
UPDATE EMPv0 SET JOB = 'MANAGER' WHERE EMPNO = 1111;  -- 뷰 UPDATE 하면 EMP테이블도 UPDATE
DELETE FROM EMPv0 WHERE EMPNO = 1111;  -- 뷰 DELETE 하면 EMP테이블도 DELETE

SELECT * FROM EMP;
SELECT * FROM EMPv0;  -- 가상의 테이블

-- 30번 부서만 보이도록 VIEW생성
CREATE OR REPLACE VIEW EMPv0
    AS SELECT * FROM EMP WHERE DEPTNO = 30;

DESC EMPv0;
SELECT * FROM EMPv0;
SELECT * FROM EMP;
INSERT INTO EMPv0 VALUES (1111, '홍', NULL, NULL, SYSDATE, 9000, 900, 30);

-- 20번 부서 입력은 가능하지만 보이지 않음 / 30번 부서만 보임
INSERT INTO EMPv0 VALUES (2222, '신', NULL, NULL, SYSDATE, 9000, 900, 20);
-- 20번 부서는 삭제 안됨 / 30번 부서 뷰에서는 30번 부서만 삭제 가능
DELETE FROM EMPv0 WHERE EMPNO IN (1111, 2222);
DELETE FROM EMP WHERE EMPNO = 2222;

-- ENAME, JOB, HIREDATE 만으로 뷰 생성
CREATE OR REPLACE VIEW EMPv0
    AS SELECT ENAME, JOB, HIREDATE FROM EMP;
INSERT INTO EMPv0 VALUES ('홍', 'SALESMAN', SYSDATE);  -- INSERT 불가
-- ★ VIEW 생성시 NOT NULL 필드를 꼭 포함해야함 ★
COMMIT;

--  VIEW 의 제한 조건
-- (1) 뷰의 조건
-- (2) 읽기 전용
-- WITH CHECK OPTION을 설정한 뷰는 뷰의 조건에 해당하는 데이터만 삽입, 수정, 삭제 가능
-- WITH READ ONLY을 설정한 뷰는 읽지 전용 뷰

-- 30번 부서만 보이는 VIEW 생성 (WITH CHECK OPTION)
CREATE OR REPLACE VIEW EMPv0
    AS SELECT * FROM EMP WHERE DEPTNO = 30
    WITH CHECK OPTION;
INSERT INTO EMPv0 VALUES (1111, '홍', NULL, NULL, SYSDATE, 9000, 900, 30);  -- 30번 부서만 INSERT
INSERT INTO EMPv0 VALUES (1112, '홍', NULL, NULL, SYSDATE, 9000, 900, 40);  -- WITH CHECK OPTION 위배

SELECT * FROM EMP;
SELECT * FROM EMPv0;
DELETE FROM EMPv0 WHERE ENAME = 'SMITH'; -- WITH CHECK OPTION 위배
DELETE FROM EMPv0 WHERE EMPNO = 1111;

-- 일기전용 뷰(WITH READ ONLY)
CREATE OR REPLACE VIEW EMPv0
    AS SELECT EMPNO, ENAME, JOB, MGR, DEPTNO FROM EMP
    WITH READ ONLY;
SELECT * FROM EMPv0;
INSERT INTO EMPv0 VALUES (1111, '홍', 'MANAGER', 1234, 40); -- WITH READ ONLY 위배

-- (2) 복합뷰 : 2개 이상의 테이블로 구성한 뷰이거나 가상의 필드로 뷰를 만들 경우
--             DML문을 제한적으로 사용
-- ① 2개 이상의 테이블
CREATE OR REPLACE VIEW EMPv0
    AS SELECT EMPNO, ENAME, JOB, DNAME, LOC FROM EMP E, DEPT D
    WHERE E.DEPTNO = D.DEPTNO;

SELECT * FROM EMPv0;

-- 복합뷰는 갱신 불가(INSERT, DELETE, UPDATE)
INSERT INTO EMPv0 VALUES (1111, '홍', 'MANAGER', 'RESEARCH', 'DALLAS');

-- ② 가상의 필드로 뷰 : 컬럼에 별칭(영문자, 숫자, _)을 이용하여 뷰 생성해야함
CREATE OR REPLACE VIEW EMPv0 (EMPNO, ENAME, ANNALY_SAL)  -- 별칭을 별도로 설정
    AS SELECT EMPNO, ENAME, SAL*12 FROM EMP WHERE DEPTNO = 10;
    
SELECT * FROM EMPv0;

-- ex. 부서번호, 최소급여, 최대급여, 부서평균급여를 포함한 뷰(DEPTv1) 생성
CREATE OR REPLACE VIEW DEPTv1 (DEPTNO, MIN_SAL, MAX_SAL, AVG_DSAL)
    AS SELECT DEPTNO, MIN(SAL), MAX(SAL), TRUNC(AVG(SAL)) FROM EMP
    GROUP BY DEPTNO;
    
SELECT * FROM DEPTv1;

-- ex. 직책, 부서를 포함한 EMPv0 뷰를 생성 : DISTINCT를 포함한 뷰는 읽기 전용
CREATE OR REPLACE VIEW EMPv0
    AS SELECT DISTINCT JOB, DEPTNO FROM EMP ORDER BY DEPTNO;
SELECT * FROM EMPv0;

-- 2. INLINE VIEW : FROM절 상의 서브쿼리를 INLINEVIEW라 하며, FROM절에 오는 서브쿼리는 VIEW처럼 작용
-- ex. 급여가 2000보다 큰 사원의 평균 급여
CREATE OR REPLACE VIEW EMPv0
    AS (SELECT AVG(SAL) FROM EMP WHERE SAL > 2000);

SELECT AVG(SAL) FROM (SELECT SAL FROM EMP WHERE SAL > 2000);

-- ex. 부서 평균 월급보다 높은 사원의 사번, 이름, 급여
SELECT EMPNO, ENAME, SAL
    FROM EMP E
    WHERE SAL > (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = E.DEPTNO);
    
SELECT EMPNO, ENAME, SAL
    FROM EMP E, (SELECT DEPTNO, AVG(SAL) AVGSAL FROM EMP GROUP BY DEPTNO) A
    WHERE E.DEPTNO = A.DEPTNO AND SAL > AVGSAL;

--  3. TOP-N 구문 (TOP 1~10등 / TOP 11~20등 / TOP 6등~10등)
-- ROWNUM : FROM의 테이블로부터 가져온 순서
SELECT ROWNUM, ENAME FROM EMP WHERE DEPTNO = 20;
SELECT ROWNUM, ENAME FROM EMP WHERE DEPTNO = 20 ORDER BY ENAME;

-- 등수, 이름, SAL
SELECT ENAME, SAL FROM EMP ORDER BY SAL DESC; -- 테이블로 부터 가져온 순서
SELECT ROWNUM, ENAME, SAL FROM (SELECT * FROM EMP ORDER BY SAL DESC);

-- 함수를 이용한 RANK 출력
SELECT RANK() OVER(ORDER BY SAL DESC) RANK,
    DENSE_RANK() OVER(ORDER BY SAL DESC) DENSE_RANK,
    ROW_NUMBER() OVER(ORDER BY SAL DESC) ROW_NUMBER,
    ENAME, SAL FROM EMP;

-- SAL 기준 1~5등
SELECT ROWNUM , ENAME, SAL FROM (SELECT ENAME, SAL FROM EMP ORDER BY SAL DESC)
    WHERE ROWNUM <= 5;
SELECT ROWNUM , ENAME, SAL FROM (SELECT ENAME, SAL FROM EMP ORDER BY SAL DESC)
    WHERE ROWNUM BETWEEN 6 AND 10;

-- TOP-N 구문 1단계
SELECT ROWNUM RN, ENAME, SAL FROM (SELECT ENAME, SAL FROM EMP ORDER BY SAL DESC);
-- TON-N 구문 2단계
SELECT ROWNUM, RN, ENAME, SAL
    FROM (SELECT ROWNUM RN, ENAME, SAL FROM (SELECT ENAME, SAL FROM EMP ORDER BY SAL DESC)) 
    WHERE RN BETWEEN 6 AND 10;

-- 이름을 알파벳 순서대로 정렬해서 6~10번째까지 출력
SELECT ROWNUM, RN, ENAME, EMPNO, JOB, MGR, HIREDATE
    FROM (SELECT ROWNUM RN, ENAME, EMPNO, JOB, MGR, HIREDATE FROM (SELECT ENAME, EMPNO, JOB, MGR, HIREDATE FROM EMP ORDER BY ENAME))
    WHERE RN BETWEEN 6 AND 10;















